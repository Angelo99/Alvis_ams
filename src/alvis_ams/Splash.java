/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package alvis_ams;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import ams_utilities.*;
import java.awt.Color;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Dexter
 */
public class Splash extends javax.swing.JFrame implements KeyListener {

    /**
     * Creates new form Splash
     */
    public Splash() {
        initComponents();
        jLabel2.setVisible(false);
        comPortCMB.setVisible(false);
        btnConnect.setVisible(false);
        lblSerial.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        comPortCMB = new javax.swing.JComboBox<>();
        btnConnect = new javax.swing.JButton();
        lblSerial = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 820, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));
        jPanel3.setForeground(new java.awt.Color(255, 255, 255));
        jPanel3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel3KeyPressed(evt);
            }
        });
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alvis_ams/fingerprint_scan.gif"))); // NOI18N
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 70, -1, -1));

        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("Not Connected");
        jLabel1.setToolTipText("");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 440, 180, -1));

        comPortCMB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9", " " }));
        comPortCMB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comPortCMBKeyPressed(evt);
            }
        });
        jPanel3.add(comPortCMB, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, 100, 20));

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });
        btnConnect.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnConnectKeyPressed(evt);
            }
        });
        jPanel3.add(btnConnect, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, -1, -1));

        lblSerial.setForeground(new java.awt.Color(51, 153, 0));
        lblSerial.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSerial.setText("Press Finger");
        jPanel3.add(lblSerial, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 330, 160, -1));

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel3KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F1) {

            Login x = new Login();
            x.setVisible(true);
            if ("Disconnect".equals(btnConnect.getText())) {
                fp.close();
            }
            this.dispose();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            if (btnConnect.isVisible()) {
                comPortCMB.setVisible(false);
                btnConnect.setVisible(false);
            } else {
                comPortCMB.setVisible(true);
                btnConnect.setVisible(true);
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            int dResult = JOptionPane.showConfirmDialog(null, "Confirm Exit?");
            if(dResult == JOptionPane.YES_OPTION)
                this.dispose();
        }

    }//GEN-LAST:event_jPanel3KeyPressed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_F1) {

            Login x = new Login();
            x.setVisible(true);
            if ("Disconnect".equals(btnConnect.getText())) {
                fp.close();
            }
            this.dispose();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            if (btnConnect.isVisible()) {
                comPortCMB.setVisible(false);
                btnConnect.setVisible(false);
            } else {
                comPortCMB.setVisible(true);
                btnConnect.setVisible(true);
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            int dResult = JOptionPane.showConfirmDialog(null, "Confirm Exit?");
            if(dResult == JOptionPane.YES_OPTION)
                this.dispose();
        }
    }//GEN-LAST:event_formKeyPressed
    FingerPrint fp = new FingerPrint();
    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed

        String comPort = (String) comPortCMB.getSelectedItem();

        if ("Connect".equals(btnConnect.getText())) {
            int status = -1;
            try {
                status = fp.connect(comPort);
            } catch (Exception ex) {
                Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.out.println(status);
            if (status == 0) {
                jLabel2.setVisible(true);
                lblSerial.setVisible(true);
                comPortCMB.setEnabled(false);
                btnConnect.setText("Disconnect");
                jLabel1.setText("Connection Successful");
                jLabel1.setForeground(Color.green);
                SerialThread st = new SerialThread();
                st.start();
            }
        } else if ("Disconnect".equals(btnConnect.getText())) {
            fp.close();
            jLabel2.setVisible(false);
            lblSerial.setVisible(false);
            jLabel1.setText("Not Connected");
            jLabel1.setForeground(Color.red);
            comPortCMB.setEnabled(true);
            btnConnect.setText("Connect");
        }

    }//GEN-LAST:event_btnConnectActionPerformed

    private void comPortCMBKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comPortCMBKeyPressed
        // TODO add your handling code here:if (evt.getKeyCode() == KeyEvent.VK_F1) 
        if (evt.getKeyCode() == KeyEvent.VK_F1) {

            Login x = new Login();
            x.setVisible(true);
            if ("Disconnect".equals(btnConnect.getText())) {
                fp.close();
            }
            this.dispose();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            if (btnConnect.isVisible()) {
                comPortCMB.setVisible(false);
                btnConnect.setVisible(false);
            } else {
                comPortCMB.setVisible(true);
                btnConnect.setVisible(true);
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            int dResult = JOptionPane.showConfirmDialog(null, "Confirm Exit?");
            if(dResult == JOptionPane.YES_OPTION)
                this.dispose();
        }

    }//GEN-LAST:event_comPortCMBKeyPressed

    private void btnConnectKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnConnectKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F1) {

            Login x = new Login();
            x.setVisible(true);
            if ("Disconnect".equals(btnConnect.getText())) {
                fp.close();
            }
            this.dispose();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            if (btnConnect.isVisible()) {
                comPortCMB.setVisible(false);
                btnConnect.setVisible(false);
            } else {
                comPortCMB.setVisible(true);
                btnConnect.setVisible(true);
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
        }
    }//GEN-LAST:event_btnConnectKeyPressed
    public class SerialThread extends Thread {

        private String text = null;
        private int uid = -1;

        @Override
        public void run() {
            while (true) {
                text = fp.getInputLine();
                lblSerial.setText(text);
                if (text != null && text != "Please press finger") {
                    if (Character.isDigit(text.charAt(12))) {
                        uid = Character.digit(text.charAt(12), 10);
                        dbConnection con = new dbConnection("ams", "root", "");
                        System.out.println(con.isOpen());
                        try {
                            System.out.println(con.addTimeLog(uid));
                        } catch (SQLException ex) {
                            Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                            Thread.sleep(2000);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                try {
                    Thread.sleep(5000);
                } catch (Exception ex) {
                }
                new Splash().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JComboBox<String> comPortCMB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblSerial;
    // End of variables declaration//GEN-END:variables

    @Override
    public void keyTyped(KeyEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

    }

    @Override
    public void keyPressed(KeyEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

    }

    @Override
    public void keyReleased(KeyEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
